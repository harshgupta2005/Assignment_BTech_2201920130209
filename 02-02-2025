# README - DSA, OOP, and DBMS Problems(02/02/2025)

## 1. DSA Question: *59. Spiral Matrix II*

*Platform:* LeetCode

### Problem Statement
Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

 

Example 1:


Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20

### Solution Code
#### C++ Implementation:
cpp
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>>matrix(n,vector<int>(n,1));
      int left=0;
      int top=0;
      int right=n-1;
      int bottom=n-1;
      int index=1;
     
      while(top<=bottom&&left<=right){
        for(int i=left;i<=right;i++){
            matrix[top][i]=index;
            index++;
        }top++;
        for( int i=top;i<=bottom;i++){
            matrix[i][right]=index;
            index++;
        }
        right--;
        // if(top<=bottom){
            for(int i=right;i>=left;i--){
                matrix[bottom][i]=index;
                index++;
            }bottom--;
        // } if(left<=right){     
                for(int i=bottom;i>=top;i--){
                    matrix[i][left]=index;
                    index++;
                }
                 left++;
        // }
        }
       
     

   return matrix; }
};

## 2. DSA Question: *41. First Missing Positive*

*Platform:* LeetCode

### Problem Statement
Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1

### Solution Code
#### C++ Implementation:
cpp
```
class Solution {
public:
vector<int> duplicate(vector<int> & arr){
    unordered_map<int,int>mp;
    vector<int>newarr;
    for(int i:arr){
        mp[i]++;
    }
    for(auto x:mp){
        newarr.push_back(x.first);
    }
    return newarr;
}
    int firstMissingPositive(vector<int>& nums) {
        vector<int>ans;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>0)ans.push_back(nums[i]);
        }
        ans=duplicate(ans);
        sort(ans.begin(),ans.end());
        int i=0;
        for(i=0;i<ans.size();i++){
            if(ans[i]!=i+1){
                return i+1;
            }
        }
    return i+1;}
};
return (dummynode->next);}
};

```

---
## 3. DSA Question: *50. Pow(x, n)*

*Platform:* LeetCode

### Problem Statement
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104

### Solution Code
#### C++ Implementation:
class Solution {
public:
    double myPow(double x, int n) {
       if(n<0) return 1/x * myPow(1/x, -(n+1));
    if(n==0) return 1;
    if(n==2) return x*x;
    if(n%2==0) return myPow( myPow(x, n/2), 2);
    else return x*myPow( myPow(x, n/2), 2);
    }
};
```

---

## DBMS Question: *2356. Number of Unique Subjects Taught by Each Teacher*

*Platform:* LeetCode

### Problem Statement
SQL Schema
Pandas Schema
Table: Teacher

+-------------+------+
| Column Name | Type |
+-------------+------+
| teacher_id  | int  |
| subject_id  | int  |
| dept_id     | int  |
+-------------+------+
(subject_id, dept_id) is the primary key (combinations of columns with unique values) of this table.
Each row in this table indicates that the teacher with teacher_id teaches the subject subject_id in the department dept_id.
 

Write a solution to calculate the number of unique subjects each teacher teaches in the university.

Return the result table in any order.

The result format is shown in the following example.

 

Example 1:

Input: 
Teacher table:
+------------+------------+---------+
| teacher_id | subject_id | dept_id |
+------------+------------+---------+
| 1          | 2          | 3       |
| 1          | 2          | 4       |
| 1          | 3          | 3       |
| 2          | 1          | 1       |
| 2          | 2          | 1       |
| 2          | 3          | 1       |
| 2          | 4          | 1       |
+------------+------------+---------+
Output:  
+------------+-----+
| teacher_id | cnt |
+------------+-----+
| 1          | 2   |
| 2          | 4   |
+------------+-----+
Explanation: 
Teacher 1:
  - They teach subject 2 in departments 3 and 4.
  - They teach subject 3 in department 3.
Teacher 2:
  - They teach subject 1 in department 1.
  - They teach subject 2 in department 1.
  - They teach subject 3 in department 1.
  - They teach subject 4 in department 1.

### Solution Code
```
# Write your MySQL query statement below
select teacher_id,count(DISTINCT subject_id) as cnt 
from teacher 
group by teacher_id;
```


---


## OOPS Question: Implement Circle

*Platform:* w3resource

### Problem Statement
Create a class Book with attributes title and author. Implement constructor overloading to initialize objects in different wayscpp
#include <iostream>
using namespace std;

class Book {
private:
    string title, author;

public:
    Book() {
        title = "Unknown";
        author = "Unknown";
    }

    Book(string t) {
        title = t;
        author = "Unknown";
    }

    Book(string t, string a) {
        title = t;
        author = a;
    }

    void display() {
        cout << "Title: " << title << ", Author: " << author << endl;
    }
};

int main() {
    Book b1;
    Book b2("C++ Programming");
    Book b3("Java Programming", "John Doe");

    b1.display();
    b2.display();
    b3.display();

    return 0;
}


---
