# README - DSA, OOP, and DBMS Problems(28/01/2025)

## 1. DSA Question: *451. Sort Characters By Frequency*

*Platform:* LeetCode

### Problem Statement
Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of th.

### Examples
Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.

### Solution Code
#### C++ Implementation:
cpp
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char,int>charFreq;
        for(auto ch : s){
            charFreq[ch]++;
        }
        string ans="";
        while(charFreq.size()>0){
            int maxcount=INT_MIN;
            char ch;
            for(const auto& pair : charFreq){
                if(pair.second > maxcount){
                    maxcount=pair.second;
                    ch=pair.first;
                }
            }
            for(int i=0;i<maxcount;i++){
                    ans+=ch;
                }
            charFreq.erase(ch);
        }
        return ans;
    }
};


---

## 2. DSA Question: *1588. Sum of All Odd Length Subarrays*

*Platform:* LeetCode

### Problem Statement
Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.
A subarray is a contiguous subsequence of the array.

### Examples
#### Example 1:
Example 1:

Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58
Example 2:

Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.
Example 3:

Input: arr = [10,11,12]
Output: 66
 

Constraints:

1 <= arr.length <= 100
1 <= arr[i] <= 1000
 
### Solution Code
#### C++ Implementation:
cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int sumOddLengthSubarrays(vector<int>& arr) {
        vector<int>ans;
        for(int i=0;i<arr.size();i++){
            
            for(int j=i;j<arr.size();j++){
                int size=j-i+1;
                int sum=0;
                if(size%2!=0){
                    for(int k=i;k<=j;k++){
                        sum+=arr[k];
                    }
                 ans.push_back(sum);
                   
                }
            }
        }
        int sum1=0;
        for(int i=0;i<ans.size();i++){
            sum1+=ans[i];
        }
   return sum1; }
};

---
## 3. DSA Question: *1781. Sum of Beauty of All Substrings*

*Platform:* LeetCode

### Problem Statement
The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.

For example, the beauty of "abaacc" is 3 - 1 = 2.
Given a string s, return the sum of beauty of all of its substrings.

 
### Examples
Example 1:

Input: s = "aabcb"
Output: 5
Explanation: The substrings with non-zero beauty are ["aab","aabc","aabcb","abcb","bcb"], each with beauty equal to 1.
Example 2:

Input: s = "aabcbaa"
Output: 17
 

Constraints:

1 <= s.length <= 500
s consists of only lowercase English letters.

### Solution Code
#### C++ Implementation:
cpp
class Solution {
    public: int getmax(vector<int>&frq){
       int maxi=0;
       for(int i=0;i<frq.size();i++){
        maxi=max(maxi,frq[i]);
       }
   return maxi; }
      public: int getmin(vector<int>&frq){
        int mini=INT_MAX;
        for(int i=0;i<frq.size();i++){
            if(frq[i]!=0){
            mini=min(mini,frq[i]);
            }
        }
    return mini;}
public:
    int beautySum(string s) {
        int sum=0;
        for(int i=0;i<s.size();i++){
            vector<int>frq(26,0);
            for(int j=i;j<s.size();j++){
                frq[s[j]-'a']++;
                int ans=getmax(frq)-getmin(frq);
                sum+=ans;
            }
        }
        
   return sum; }
};

---

## DBMS Question: *620. Not Boring Movies*

*Platform:* LeetCode

### Problem Statement
Table: Cinema

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| id             | int      |
| movie          | varchar  |
| description    | varchar  |
| rating         | float    |
+----------------+----------+
id is the primary key (column with unique values) for this table.
Each row contains information about the name of a movie, its genre, and its rating.
rating is a 2 decimal places float in the range [0, 10]
 

Write a solution to report the movies with an odd-numbered ID and a description that is not "boring".

Return the result table ordered by rating in descending order.

The result format is in the following example.

 

### Solution Code
sql
order by rating desc;
  # Write your MySQL query statement below
select * from cinema
where id%2 != 0 and 
description != "boring"
order by rating desc;


## OOPS Question: Implement Circle

*Platform:* w3resource

### Problem Statement
Create a class BankAccount with attributes accountNumber, accountHolderName, and balance. Implement methods to deposit an amount, withdraw an amount (with sufficient balance check), and display the account details.
### Example

### Solution Code
cpp
#include <iostream>
using namespace std;

class BankAccount {
private:
    int accountNumber;
    string accountHolderName;
    double balance;

public:
    BankAccount(int accNum, string accHolder, double bal) {
        accountNumber = accNum;
        accountHolderName = accHolder;
        balance = bal;
    }

    void deposit(double amount) {
        balance += amount;
    }

    bool withdraw(double amount) {
        if (amount > balance) {
            cout << "Insufficient balance" << endl;
            return false;
        }
        balance -= amount;
        return true;
    }

    void displayAccountDetails() {
        cout << "Account Number: " << accountNumber << endl;
        cout << "Account Holder: " << accountHolderName << endl;
        cout << "Balance: " << balance << endl;
    }
};

int main() {
    BankAccount account(12345, "John Doe", 5000.0);
    account.deposit(1500.0);
    account.withdraw(2000.0);
    account.displayAccountDetails();
    return 0;
}

---
