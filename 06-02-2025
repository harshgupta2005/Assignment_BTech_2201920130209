# README - DSA, OOP, and DBMS Problems(06/02/2025)

## 1. DSA Question: *61. Rotate List*

*Platform:* LeetCode

### Problem Statement
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109
### Solution Code
#### C++ Implementation:
cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
 public:   ListNode*kthnode(ListNode*temp,int k){
        
        int len=1;
        while(len!=k){
            if(len==k)return temp;
            len++;
            temp=temp->next;
        }
        return temp;
    }
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL||k==0)return head;
        int cnt=1;
        ListNode*tail=head;
        while(tail->next!=NULL){
            cnt++;
            tail=tail->next;
        }
        if(k%cnt==0)return head;
        k=k%cnt;
        tail->next=head;
        ListNode*newNode=kthnode( head,cnt-k);
        head=newNode->next;
        newNode->next=NULL;
        return head;
    }
};
---

## 2. DSA Question: *142. Linked List Cycle II*

*Platform:* LeetCode

### Problem Statement
Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
Example 2:


Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.
Example 3:


Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
 

Follow up: Can you solve it using O(1) (i.e. constant) memory?


 
### Solution Code
#### C++ Implementation:
cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast!=NULL&&fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast){
                slow=head;
                while(slow!=fast){
                    slow=slow->next;
                    fast=fast->next;
                }
                return slow;
            }
        }


    return NULL;}
};
## 3. DSA Question: *78. Subsets*

*Platform:*LeetCode*

### Problem Statement
Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

### Solution Code
#### C++ Implementation:
class Solution {
    public: void powerset(vector<int> &nums,vector<vector<int>> &ans,int i,int n,vector<int> &res){
        if(i==n){
            ans.push_back(res);
            return;
        }
        res.push_back(nums[i]);
        powerset(nums,ans,i+1,n,res);
        res.pop_back();
        powerset(nums,ans,i+1,n,res);

    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>res;
        powerset(nums,ans,0,nums.size(),res);
        return ans;
    }
};
---

## DBMS Question: *1667. Fix Names in a Table*

*Platform:* LeetCode

### Problem Statement
Table: Users

+----------------+---------+
| Column Name    | Type    |
+----------------+---------+
| user_id        | int     |
| name           | varchar |
+----------------+---------+
user_id is the primary key (column with unique values) for this table.
This table contains the ID and the name of the user. The name consists of only lowercase and uppercase characters.
 

Write a solution to fix the names so that only the first character is uppercase and the rest are lowercase.

Return the result table ordered by user_id.

The result format is in the following example.

 

Example 1:

Input: 
Users table:
+---------+-------+
| user_id | name  |
+---------+-------+
| 1       | aLice |
| 2       | bOB   |
+---------+-------+
Output: 
+---------+-------+
| user_id | name  |
+---------+-------+
| 1       | Alice |
| 2       | Bob   |
+---------+-------+

### Solution Code
# Write your MySQL query statement below
SELECT user_id, CONCAT(UPPER(LEFT(name,1)),LOWER(SUBSTRING(name,2))) As name
from users
ORDER BY user_id;
 



## OOPS Question: 

*Platform:* w3resource

### Problem Statement
Create a class Vehicle with attributes brand and model. Derive two classes, Car and Bike, from Vehicle. Implement a method displayDetails() in both derived classes to print:

For Car: "Car - Brand: [brand], Model: [model]"
For Bike: "Bike - Brand: [brand], Model: [model]"cpp
#include <iostream>
using namespace std;

class Vehicle {
protected:
    string brand, model;
public:
    Vehicle(string b, string m) : brand(b), model(m) {}
    virtual void displayDetails() = 0;
};

class Car : public Vehicle {
public:
    Car(string b, string m) : Vehicle(b, m) {}
    void displayDetails() override {
        cout << "Car - Brand: " << brand << ", Model: " << model << endl;
    }
};

class Bike : public Vehicle {
public:
    Bike(string b, string m) : Vehicle(b, m) {}
    void displayDetails() override {
        cout << "Bike - Brand: " << brand << ", Model: " << model << endl;
    }
};

int main() {
    Vehicle* v1 = new Car("Toyota", "Corolla");
    Vehicle* v2 = new Bike("Yamaha", "R15");

    v1->displayDetails();
    v2->displayDetails();

    delete v1;
    delete v2;
    return 0;
}




---
