
# README - DSA, OOP, and DBMS Problems(08/02/2025)

## 1. DSA Question: *206. Reverse Linked List*

*Platform:* LeetCode

### Problem Statement
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

### Solution Code
#### C++ Implementation:
cpp/**
 class Solution {
public:
    int climbStairs(int n) {
        if(n==0||n==1)return 1;
            int i=1;
            int j=1;
            for(int x=2;x<=n;x++){
                int temp=j;
                j=i+j;
                i=temp;
            }
    return j;}
};
---

## 2. DSA Question: *55. Jump Game*
Platform:* LeetCode

### Problem Statement
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105
### Solution Code
#### C++ Implementation:
cpp

class Solution {
public:
    bool canJump(vector<int>& nums) {
    int maxi=0;
    for(int i=0;i<nums.size();i++){
        if(i>maxi)return false;
        else{
           maxi= max(maxi,i+nums[i]);
        }
    }

  return true;  }
};

---

## 3. DSA Question: *53. Maximum Subarray*

*Platform:*leetcoede*

### Problem Statement
Given an integer array nums, find the subarray with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

### Solution Code
#### C++ Implementation:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
       long long sum=0;
       long long max=INT_MIN;
       for(int i=0;i<nums.size();i++){
        sum+=nums[i];
        if(sum>max)max=sum;
        if(sum<0)sum=0;
       }

  return max;  }
};
---

## DBMS Question: *196. Delete Duplicate Emails*

*Platform:* LeetCode

### Problem Statement
Table: Person

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| email       | varchar |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains an email. The emails will not contain uppercase letters.
 

Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.

For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.

For Pandas users, please note that you are supposed to modify Person in place.

After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.

The result format is in the following example.

 

Example 1:

Input: 
Person table:
+----+------------------+
| id | email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
| 3  | john@example.com |
+----+------------------+
Output: 
+----+------------------+
| id | email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
+----+------------------+
Explanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.

### Solution Code
# Write your MySQL query statement below
DELETE p1 
FROM person p1,
    person p2
WHERE
    p1.Email = p2.Email 
AND p1.Id > p2.Id



## OOPS Question: 

*Platform:* w3resource

### Problem Statement
Implement a Student Management System in C++ using Object-Oriented Programming principles. The system should allow:

Adding student details (Name, Roll Number, Marks in 3 subjects).
Calculating the total and average marks.
Displaying student details along with their total and average marks.

cpp
#include <iostream>
using namespace std;

class Student {
private:
    string name;
    int rollNumber;
    float marks[3];

public:
    Student(string n, int roll, float m1, float m2, float m3) {
        name = n;
        rollNumber = roll;
        marks[0] = m1;
        marks[1] = m2;
        marks[2] = m3;
    }

    float getTotalMarks() {
        return marks[0] + marks[1] + marks[2];
    }

    float getAverageMarks() {
        return getTotalMarks() / 3.0;
    }

    void displayDetails() {
        cout << "Student Name: " << name << endl;
        cout << "Roll Number: " << rollNumber << endl;
        cout << "Total Marks: " << getTotalMarks() << endl;
        cout << "Average Marks: " << getAverageMarks() << endl;
    }
};

int main() {
    Student student1("Alice", 101, 85, 90, 78);
    student1.displayDetails();

    return 0;
}




---
