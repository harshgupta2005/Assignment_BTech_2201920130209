# README - DSA, OOP, and DBMS Problems(29/01/2025)

## 1. DSA Question: *328. Odd Even Linked List*

*Platform:* LeetCode

### Problem Statement
Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.
The first node is considered odd, and the second node is even, and so on.
Note that the relative order inside both the even and odd groups should remain as it was in the input.
You must solve the problem in O(1) extra space complexity and O(n) time complexity.

Example 1:


Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]
Example 2:


Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]
 

Constraints:

The number of nodes in the linked list is in the range [0, 104].
-106 <= Node.val <= 106

1 <= n <= 50

### Solution Code
#### C++ Implementation:
cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
    if(head==NULL||head->next==NULL)return head;
    ListNode* odd=head;
    ListNode* even=head->next;
    ListNode*curreven=even;
    while(even!=NULL&&even->next!=NULL){
        odd->next=odd->next->next;
        even->next=even->next->next;
        odd=odd->next;
        even=even->next;

    }
    odd->next=curreven;
    return head;    
    }
};


## 2. DSA Question: *2. Add Two Numbers*

*Platform:* LeetCode

### Problem Statement
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.


#### Example 3:
*Input:*
cpp
l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]

*Output:*
cpp
[8,9,9,9,0,0,0,1]


### Constraints:
- The number of nodes in each linked list is in the range [1, 100].
- 0 <= Node.val <= 9
- It is guaranteed that the list represents a number that does not have leading zeros.

### Solution Code
#### C++ Implementation:
cpp
```
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* t1=l1;
        ListNode* t2=l2;
        ListNode*dummynode=new ListNode(-1);
        ListNode* curr=dummynode;
        int carr=0;
        while(t1!=NULL||t2!=NULL){
            int sum=carr;
            if(t1)sum+=t1->val;
            if(t2)sum+=t2->val;
            ListNode* newNode=new ListNode(sum%10);
            carr=sum/10;
            curr->next=newNode;
            curr=curr->next;
            if(t1)t1=t1->next;
            if(t2)t2=t2->next;
        }
        if(carr){
            ListNode* newNode=new ListNode(carr);
            curr->next=newNode;
        }

return (dummynode->next);}
};

```

---
## 3. DSA Question: *3028. Ant on the Boundary*

*Platform:* LeetCode

### Problem Statement
An ant is on a boundary. It sometimes goes left and sometimes right.

You are given an array of non-zero integers nums. The ant starts reading nums from the first element of it to its end. At each step, it moves according to the value of the current element:

If nums[i] < 0, it moves left by -nums[i] units.
If nums[i] > 0, it moves right by nums[i] units.
Return the number of times the ant returns to the boundary.

Notes:

There is an infinite space on both sides of the boundary.
We check whether the ant is on the boundary only after it has moved |nums[i]| units. In other words, if the ant crosses the boundary during its movement, it does not count.
 

Example 1:

Input: nums = [2,3,-5]
Output: 1
Explanation: After the first step, the ant is 2 steps to the right of the boundary.
After the second step, the ant is 5 steps to the right of the boundary.
After the third step, the ant is on the boundary.
So the answer is 1.
Example 2:

Input: nums = [3,2,-3,-4]
Output: 0
Explanation: After the first step, the ant is 3 steps to the right of the boundary.
After the second step, the ant is 5 steps to the right of the boundary.
After the third step, the ant is 2 steps to the right of the boundary.
After the fourth step, the ant is 2 steps to the left of the boundary.
The ant never returned to the boundary, so the answer is 0.
 

Constraints:

1 <= nums.length <= 100
-10 <= nums[i] <= 10
nums[i] != 0

n == nums.length
1 <= nums.length <= 1000
1 <= nums[i] <= 100
1 <= left <= right <= n * (n + 1) / 2

### Solution Code
#### C++ Implementation:
cpp
```
class Solution {
public:
    int returnToBoundaryCount(vector<int>& nums) {
        int count=0;
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
            if(sum==0){
                count++;
            }
        }
 return count;   }
};
```

---

## DBMS Question: *175. Combine Two Tables*

*Platform:* LeetCode

### Problem Statement
Table: Person

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| personId    | int     |
| lastName    | varchar |
| firstName   | varchar |
+-------------+---------+
personId is the primary key (column with unique values) for this table.
This table contains information about the ID of some persons and their first and last names.
 

Table: Address

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| addressId   | int     |
| personId    | int     |
| city        | varchar |
| state       | varchar |
+-------------+---------+
addressId is the primary key (column with unique values) for this table.
Each row of this table contains information about the city and state of one person with ID = PersonId.
 

Write a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Person table:
+----------+----------+-----------+
| personId | lastName | firstName |
+----------+----------+-----------+
| 1        | Wang     | Allen     |
| 2        | Alice    | Bob       |
+----------+----------+-----------+
Address table:
+-----------+----------+---------------+------------+
| addressId | personId | city          | state      |
+-----------+----------+---------------+------------+
| 1         | 2        | New York City | New York   |
| 2         | 3        | Leetcode      | California |
+-----------+----------+---------------+------------+
Output: 
+-----------+----------+---------------+----------+
| firstName | lastName | city          | state    |
+-----------+----------+---------------+----------+
| Allen     | Wang     | Null          | Null     |
| Bob       | Alice    | New York City | New York |
+-----------+----------+---------------+----------+
Explanation: 
There is no address in the address table for the personId = 1 so we return null in their city and state.
addressId = 1 contains information about the address of personId = 2


### Solution Code
```
# Write your MySQL query statement below
select Person.firstName,Person.lastName,Address.city,Address.state
from Person left join Address
on Person.personId=Address.personId;
```


---


## OOPS Question: Implement Circle

*Platform:* w3resource

### Problem Statement
Create a class Car with attributes brand, model, and year. Implement methods to set the details, display the car details, and check if the car is older than a given year.### Solution Code
cpp
#include <iostream>
using namespace std;

class Car {
private:
    string brand;
    string model;
    int year;

public:
    void setDetails(string b, string m, int y) {
        brand = b;
        model = m;
        year = y;
    }

    void displayDetails() {
        cout << "Brand: " << brand << endl;
        cout << "Model: " << model << endl;
        cout << "Year: " << year << endl;
    }

    bool isOlderThan(int y) {
        return year < y;
    }
};

int main() {
    Car car;
    car.setDetails("Toyota", "Corolla", 2015);
    car.displayDetails();
    cout << "Is older than 2020? " << (car.isOlderThan(2020) ? "Yes" : "No") << endl;
    return 0;
}


---
